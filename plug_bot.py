import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import Text
from random import uniform
from config import TOKEN_PLUG

logging.basicConfig(level=logging.INFO)

logger = logging.getLogger('bot')
logger.setLevel(logging.INFO)

file_handler = logging.FileHandler('bot.log')
file_handler.setLevel(logging.INFO)

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

logger.addHandler(file_handler)

bot = Bot(token=TOKEN_PLUG)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware(logger=logger)) 

async def send_with_interval(message: types.Message, text: str):
    delay = uniform(1, 2)
    for line in text.split('\n\n'):
        await asyncio.sleep(delay)
        await message.answer(line)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton(text="–ß—Ç–æ –±—É–¥–µ—Ç —É–º–µ—Ç—å –±–æ—Ç?")
    markup.add(button)
    await send_with_interval(
        message,
        "–ü—Ä–∏–≤–µ—Ç, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ, –º—ã —Ä–∞–¥—ã –∫–∞–∂–¥–æ–º—É! ‚ù§Ô∏è\n\n"
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é, —Ç—ã —Å–º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!\n\n"
        "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–∞—á–Ω–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É üòä",
    )

@dp.message_handler(Text(equals="–ß—Ç–æ –±—É–¥–µ—Ç —É–º–µ—Ç—å –±–æ—Ç?"))
async def send_description(message: types.Message):
    await send_with_interval(
        message,
        "–í —ç—Ç–æ–º –±–æ—Ç–µ, —Å–æ–π–¥—É—Ç—Å—è –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—â—É—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞: —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å. üåöüåù\n\n"
        "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å - üåö, —Å–º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π.\n\n"
        "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å - üåù, —Å–º–æ–∂–µ—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ–∑—é–º–µ –æ—Ç —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π.\n\n"
        "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—è —Ä–µ–∑—é–º–µ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏, —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–º–µ—á–∞—Ç—å üëç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç–µ–±–µ –∏ üëé, –µ—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.\n\n"
        "–ê —Ç–µ–ø–µ—Ä—å, –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ç–æ—Ç —Å–∞–º—ã–π ‚ö° –º—ç—Ç—á ‚ö°\n\n"
        "(–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –æ–∫–∞–∑–∞–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ, –µ—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ, —á—Ç–æ–± –ø—Ä–æ–µ–∫—Ç –±—ã–ª –∑–∞–∫–æ–Ω—á–µ–Ω —Å–∫–æ—Ä–µ–µ, —Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–º–æ—â–∏)"
    )

@dp.message_handler(commands=['info'])
async def send_description_info(message: types.Message):
    await send_with_interval(
        message,
        "–í —ç—Ç–æ–º –±–æ—Ç–µ, —Å–æ–π–¥—É—Ç—Å—è –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—â—É—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞: —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å. üåöüåù\n\n"
        "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å - üåö, —Å–º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π.\n\n"
        "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å - üåù, —Å–º–æ–∂–µ—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ–∑—é–º–µ –æ—Ç —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π.\n\n"
        "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—è —Ä–µ–∑—é–º–µ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏, —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–º–µ—á–∞—Ç—å –≤ üëç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç–µ–±–µ –∏ üëé, –µ—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.\n\n"
        "–ê —Ç–µ–ø–µ—Ä—å, –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ç–æ—Ç —Å–∞–º—ã–π ‚ö° –º—ç—Ç—á ‚ö°\n\n"
        "(–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –æ–∫–∞–∑–∞–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ, –µ—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ, —á—Ç–æ–± –ø—Ä–æ–µ–∫—Ç –±—ã–ª –∑–∞–∫–æ–Ω—á–µ–Ω —Å–∫–æ—Ä–µ–µ, —Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–º–æ—â–∏)"
    )

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
