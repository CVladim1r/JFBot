from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
import asyncio

from aiogram.fsm.storage.base import (
    BaseEventIsolation,
    BaseStorage,
    StateType,
    StorageKey,
)

from aiogram.fsm.state import StatesGroup, State

from aiogram.fsm.context import FSMContext


from .user_registration import *

from bot.cities import CITIES

from bot.utils import format_vacancy

from bot.config_reader import config
from bot.keyboards.inline import *
from bot.keyboards.reply import *
from bot.utils.states import *

from bot.database.methods import *

router = Router()
bot = Bot(config.bot_token.get_secret_value(), parse_mode='HTML')

async def main_menu_user(user_id, message_id):
    main_text = "–ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏\n"
    main_text += "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
    main_text += "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ\n"
    main_text += "–û –±–æ—Ç–µ\n"
    await bot.send_message(user_id, main_text, reply_markup=await get_choose_menu_user_buttons(), disable_notification=True)

async def main_menu_employer(user_id, message_id):
    main_text = "–ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏:\n"
    main_text += "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
    main_text += "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ\n"
    main_text += "–û –±–æ—Ç–µ\n"
    await bot.send_message(user_id, main_text, reply_markup=await get_choose_menu_employer_buttons(), disable_notification=True)



@router.message(CommandStart())
async def start(msg: Message, state: FSMContext):
    user_tgid = msg.from_user.id
    
    await state.set_state(UserForm.user_tgid)
    await state.update_data(user_tgid=user_tgid)
    
    user_data = await get_user_data(user_tgid)
    employer_data = await get_employer_data(user_tgid)

    if employer_data:
        await main_menu_employer(user_tgid, msg.chat.id)
        return
    
    elif user_data:
        user_type = user_data.get("user_type")
        if user_type == "USER":
            await main_menu_user(user_tgid, msg.chat.id)
            return

    await state.set_state(UserForm.user_fullname)
    user_tgname = msg.from_user.full_name
    await state.update_data(user_fullname=user_tgname)
    
    await state.set_state(UserForm.user_tgname)
    userName = msg.from_user.username
    await state.update_data(user_tgname=userName)
    
    if not user_tgname:
        user_tgname = str(user_tgid)


    await bot.send_message(msg.chat.id, '''–ü—Ä–∏–≤–µ—Ç —è –∫–æ—Ç –ú–∏—à–∞.\n–Ø –≤—ã–ø–æ–ª–Ω—è—é –∑–¥–µ—Å—å —Å–∞–º—É—é –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é: –ø–æ–º–æ–≥–∞—é —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —É –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞, –∞ –≤ –º–∏—Ä–µ —Ü–∞—Ä–∏—Ç –≥–∞—Ä–º–æ–Ω–∏—è ‚Äì –º—è—É, –∫—Ä–∞—Å–æ—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ —è –∑–¥–µ—Å—å.''', reply_markup=None)

    # –ü–æ–∑–∂–µ –Ω–∞–¥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–µ —á–µ—Ä–µ–∑ asyncio.sleep
    await asyncio.sleep(4)
    await msg.answer("–î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ. –ö—Ç–æ —Ç—ã?", reply_markup=await get_choose_rule())



@router.callback_query(lambda c: c.data in ["job_seeker", "employer"])
async def process_user_type(callback_query: CallbackQuery, state: FSMContext):
    user_type = callback_query.data

    data = await state.get_data()
    user_tgid = data.get('user_tgid')
    user_fullname = data.get('user_fullname')
    user_tgname = data.get('user_tgname')
    
    if user_type == "job_seeker":
        await register_job_seeker(user_tgid, user_tgname, user_fullname)
        await callback_query.message.answer("–û—Ç–ª–∏—á–Ω–æ, —É –Ω–∞—Å –∫–∞–∫ —Ä–∞–∑ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π! –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ, –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ä–µ–∑—é–º–µ üòä", reply_markup=None)
        await callback_query.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û\n–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π –§–µ–¥–æ—Ä –ú–∏—Ö–∞–π–ª–æ–≤–∏—á", reply_markup=rmk)

        await state.set_state(UserForm.fio)
        #await state.set_state(UserForm.age)

    elif user_type == "employer":
        await register_employer(callback_query.message, user_tgid, user_fullname, user_tgname)



@router.message(Command('help'))
async def help_command(msg: Message):
    help_text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n" \
                "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n" \
                "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n" \
                "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n" \
                "–ò—Å–∫–∞—Ç—å –í–∞–∫–∞–Ω—Å–∏–∏ - –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n" \
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ - –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n" \
                "–û –±–æ—Ç–µ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"

    await msg.answer(help_text, reply_markup=None)
    
@router.message(Command('about'))
async def about_command(msg: Message):
    user_id = msg.from_user.id
    user_data = await get_user_data(user_id)

    if user_data:
        await main_menu_user(msg.from_user.id, msg.message_id)
    else:
        await msg.answer('SuckMyDickBROOO', reply_markup=None)