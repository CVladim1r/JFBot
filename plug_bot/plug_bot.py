import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import executor

from random import uniform
from config import TOKEN_PLUG

from bot.database.db_connector import add_user_to_db_plug_bot

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()

logger = logging.getLogger('bot')
logger.setLevel(logging.INFO)

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

bot = Bot(token=TOKEN_PLUG)
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware(logger=logger)) 

class CommandState(StatesGroup):
    COMMAND_PROCESSING = State()

async def send_with_interval(message: types.Message, text: str):
    delay = uniform(2, 3)
    for line in text.split('\n\n'):
        if line.strip():
            await asyncio.sleep(delay)
            await message.answer(line)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message, state: FSMContext):
    await CommandState.COMMAND_PROCESSING.set()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ, –º—ã —Ä–∞–¥—ã –∫–∞–∂–¥–æ–º—É ‚ù§Ô∏è")

    await send_with_interval(
        message,
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ –±—É–∫–≤–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–Ω–∏, —Ç—ã —Å–º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!"
    )
    await asyncio.sleep(1)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ß—Ç–æ –±—É–¥–µ—Ç —É–º–µ—Ç—å –±–æ—Ç?", callback_data="bot_capabilities")
    markup.add(button)
    await message.answer(
        "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–ø–æ–≤–µ—Å—Ç–∏–º —Ç–µ–±—è, –∫–æ–≥–¥–∞ –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ. ‚ò∫Ô∏è",
        reply_markup=markup
    )

    await add_user_to_db_plug_bot(message, message.from_user.id, message.from_user.username, message.from_user.full_name)
    await state.finish()

@dp.callback_query_handler(lambda query: query.data == 'bot_capabilities')
async def handle_bot_capabilities(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await send_description_info(callback_query.message, None)

@dp.message_handler(lambda message: message.text == "–ß—Ç–æ –±—É–¥–µ—Ç —É–º–µ—Ç—å –±–æ—Ç?" or message.text == "?")
async def handle_info_button(message: types.Message, state: FSMContext):
    await send_description_info(message, state)

@dp.message_handler(commands=['donate'])
async def send_description_info(message: types.Message, state: FSMContext):
    await CommandState.COMMAND_PROCESSING.set()
    await send_with_interval(
        message,
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ, —Ç–æ –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥–æ–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ sber/tinkoff. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É: tel:+79955934612\n\n",
    )
    if state:
        await state.finish()

@dp.message_handler(commands=['info'])
async def send_description_info(message: types.Message, state: FSMContext):
    await CommandState.COMMAND_PROCESSING.set()
    await message.answer("–í —ç—Ç–æ–º –±–æ—Ç–µ, —Å–æ–π–¥—É—Ç—Å—è –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—â—É—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞: —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å.\n \n–°–æ–∏—Å–∫–∞—Ç–µ–ª—å - —Å–º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π.\n \n–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å - —Å–º–æ–∂–µ—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ–∑—é–º–µ –æ—Ç —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π.")
    await send_with_interval(
        message,
        "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—è —Ä–µ–∑—é–º–µ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏, —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–º–µ—á–∞—Ç—å üëç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç–µ–±–µ –∏ üëé –µ—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.\n\n"
        "–ê —Ç–µ–ø–µ—Ä—å, –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ç–æ—Ç —Å–∞–º—ã–π ‚ö°Ô∏è–º—ç—Ç—á‚ö°Ô∏è\n\n"
        "(–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å –ø—Ä–æ–µ–∫—Ç—É, —á—Ç–æ–± –æ–Ω –∑–∞—Ä–∞–±–æ—Ç–∞–ª –±—ã—Å—Ç—Ä–µ–µ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É (—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ), –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /donate)",
    )
    if state:
        await state.finish()

@dp.message_handler()
async def handle_unknown_message(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
