import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from bot.user_registration import register_job_seeker, register_employer

from database.db_connector import add_user_to_db, get_user_data, user_exists_in_db, update_user_location, add_user_info_to_db, update_user_age, update_user_description, update_user_name

from config import TOKEN

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

class UserForm(StatesGroup):
    nickname = State()
    regStart = State()
    age = State()
    description = State()
    company_name = State()
    location = State()


@dp.message_handler(commands=['start'], state="*")
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user = message.from_user.first_name if not message.from_user.username else message.from_user.username
    
    if not user_name:
        user_name = str(user_id)

    # Check if the user already exists in the database
    user_data = await get_user_data(user_id)

    if user_data:
        user_type = user_data.get("user_type")
        if user_type == "USER":
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton("üîç –ò—Å–∫–∞—Ç—å –í–∞–∫–∞–Ω—Å–∏–∏"))
            keyboard.add(KeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"))
            keyboard.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ"))
            keyboard.add(KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"))

            await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º , {user_name}! –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –ø–æ–º–æ—â–∏", reply_markup=keyboard)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return

    await add_user_to_db(message, user_id, user, user_name, None)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–°–æ–∏—Å–∫–∞—Ç–µ–ª—å", callback_data="job_seeker"))
    keyboard.add(InlineKeyboardButton("–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å", callback_data="employer"))

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –∏–ª–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å?", reply_markup=keyboard)
    await UserForm.next()



@dp.callback_query_handler(lambda c: c.data in ["job_seeker", "employer"], state="*")
async def process_user_type(callback_query: types.CallbackQuery, state: FSMContext):
    user_type = callback_query.data
    await state.update_data(user_type=user_type)

    if user_type == "job_seeker":
        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏: –°–æ–∏—Å–∫–∞—Ç–µ–ª—å.")
        await register_job_seeker(callback_query.message, callback_query.from_user.id, callback_query.from_user.username, callback_query.from_user.username)

        await callback_query.message.answer("–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ä–µ–∑—é–º–µ. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
        await UserForm.regStart.set()

    elif user_type == "employer":
        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏: –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å.")
        await register_employer(callback_query.message, callback_query.from_user.id, callback_query.from_user.username, callback_query.from_user.username)

    await UserForm.next()

@dp.message_handler(state=UserForm.age)
async def process_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if not message.text.isdigit():
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
            return
        data['age'] = message.text
    await update_user_age(message.from_user.id, data['age'])
    await UserForm.location.set()
    await message.answer("–ö–∞–∫–æ–π –≤–∞—à –≥–æ—Ä–æ–¥?")
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"))
    keyboard.add(KeyboardButton("–ú–æ—Å–∫–≤–∞"))
    keyboard.add(KeyboardButton("–°–æ—á–∏"))
    keyboard.add(KeyboardButton("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text in ["–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ú–æ—Å–∫–≤–∞", "–°–æ—á–∏", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"], state=UserForm.location)
async def process_location(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['location'] = message.text
    await update_user_location(message.from_user.id, data['location'])
    await UserForm.nickname.set()
    await message.answer("–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")

@dp.message_handler(state=UserForm.nickname)
async def process_nickname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['nickname'] = message.text
    await update_user_name(message.from_user.id, data['nickname'])
    await UserForm.description.set()
    await message.answer("–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ.")

@dp.message_handler(state=UserForm.description)
async def process_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await update_user_description(message.from_user.id, data['description'])
    await add_user_info_to_db(message.from_user.id, data.get('nickname'), data.get('age'), data.get('description'), None)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
    await state.finish()


@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ", state="*")
async def about_bot(message: types.Message):
    about_text = "–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –∫–æ–º–ø–∞–Ω–∏—è–º –≤ —Å—Ñ–µ—Ä–µ –æ–±—â–µ–ø–∏—Ç–∞ –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤."
    await message.answer(about_text)

@dp.message_handler(lambda message: message.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", state="*")
async def personal_cabinet(message: types.Message):
    user_id = message.from_user.id

    # Fetch user data from the database
    user_data = await get_user_data(user_id)

    if user_data:
        name = user_data.get("name")
        age = user_data.get("age")
        description = user_data.get("description")
        location = user_data.get("location")
        user_type = user_data.get("user_type")

        if user_type == "USER":
            status = "–ò—â—É—â–∏–π —Ä–∞–±–æ—Ç—É"
        else:
            status = "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å"

        user_info_text = f"–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}\n–°—Ç–∞—Ç—É—Å: {status}"

        await message.answer(user_info_text)
    else:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@dp.message_handler(commands=['help'], state="*")
async def help_command(message: types.Message):
    help_text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
    help_text += "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n"
    help_text += "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
    help_text += "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
    help_text += "–ò—Å–∫–∞—Ç—å –í–∞–∫–∞–Ω—Å–∏–∏ - –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n"
    help_text += "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ - –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n"
    help_text += "–û –±–æ—Ç–µ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"

    await message.answer(help_text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
